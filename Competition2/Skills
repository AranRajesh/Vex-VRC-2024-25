#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
leftsideFront = Motor(Ports.PORT18, GearSetting.RATIO_18_1, True)
leftsideMiddle = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)
leftsideBack = Motor(Ports.PORT16, GearSetting.RATIO_18_1, True)
leftside = MotorGroup(leftsideFront, leftsideMiddle, leftsideBack)
rightsideFront = Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)
rightsideMiddle = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)
rightsideBack = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)
rightside = MotorGroup(rightsideFront, rightsideMiddle, rightsideBack)

botInertial = Inertial(Ports.PORT9)

# Bottom INtake : 10
bottomIntake = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)
#Top: 8
topIntake = Motor(Ports.PORT8, GearSetting.RATIO_6_1, True)

fullIntake = MotorGroup(bottomIntake,topIntake)


# lady brown
ladyBrown = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)

ladyBrown.set_velocity(100,PERCENT)
ladyRotation = Rotation(Ports.PORT6)
ladyRotation.set_position(0)
ladyBrown.set_stopping(HOLD)
ladyKP = 1.3


mogomech = DigitalOut(brain.three_wire_port.c)
bot = SmartDrive(leftside, rightside, botInertial, 110, 12.75, 12, INCHES)
controller_1 = Controller(PRIMARY)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


# Make random actually random
def initializeRandomSeed():
    wait(100, MSEC)
    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()
    urandom.seed(int(random))
      
# Set random seed 
initializeRandomSeed()


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")

def exponentialDrive():
    # x₁ = Left Motor X = [Controller] [3] position + [Controller] [1] position
        # x₂ = Right Motor X = [Controller] [3] position - [Controller] [1] position
    while True:   
        # Sets each motor's velocity to 0.0001x³ (shown as 0.0001 * x * x * x)
        leftsideFront.set_velocity((0.0001 * (((controller_1.axis3.position() + controller_1.axis1.position()) * (controller_1.axis3.position() + controller_1.axis1.position())) * (controller_1.axis3.position() + controller_1.axis1.position()))), PERCENT)
        leftsideMiddle.set_velocity((0.0001 * (((controller_1.axis3.position() + controller_1.axis1.position()) * (controller_1.axis3.position() + controller_1.axis1.position())) * (controller_1.axis3.position() + controller_1.axis1.position()))), PERCENT)
        leftsideBack.set_velocity((0.0001 * (((controller_1.axis3.position() + controller_1.axis1.position()) * (controller_1.axis3.position() + controller_1.axis1.position())) * (controller_1.axis3.position() + controller_1.axis1.position()))), PERCENT)
        
        rightsideFront.set_velocity((0.0001 * (((controller_1.axis3.position() - controller_1.axis1.position()) * (controller_1.axis3.position() - controller_1.axis1.position())) * (controller_1.axis3.position() - controller_1.axis1.position()))), PERCENT)
        rightsideMiddle.set_velocity((0.0001 * (((controller_1.axis3.position() - controller_1.axis1.position()) * (controller_1.axis3.position() - controller_1.axis1.position())) * (controller_1.axis3.position() - controller_1.axis1.position()))), PERCENT)
        rightsideBack.set_velocity((0.0001 * (((controller_1.axis3.position() - controller_1.axis1.position()) * (controller_1.axis3.position() - controller_1.axis1.position())) * (controller_1.axis3.position() - controller_1.axis1.position()))), PERCENT)
        
        # Spins motor according to the velocity set
        leftsideFront.spin(FORWARD)
        leftsideMiddle.spin(FORWARD)
        leftsideBack.spin(FORWARD)

        rightsideFront.spin(FORWARD)
        rightsideMiddle.spin(FORWARD)
        rightsideBack.spin(FORWARD)


def joystickDrive():
    while True:
        potentialLeftSpeed = controller_1.axis1.position() + controller_1.axis3.position()
        potentialRightSpeed = controller_1.axis3.position() - controller_1.axis1.position()
        leftside.set_velocity(potentialLeftSpeed,PERCENT)
        rightside.set_velocity(potentialRightSpeed,PERCENT)

            
        leftside.spin(FORWARD)
        rightside.spin(FORWARD)


def activateMogo():
    mogomech.set(True)

def deactivateMogo():
    mogomech.set(False)

def startIntake():
    fullIntake.set_velocity(100,PERCENT)
    fullIntake.spin(FORWARD)

def stopIntake():
    fullIntake.stop()

def reverseIntake():
    fullIntake.set_velocity(100,PERCENT)
    fullIntake.spin(REVERSE)

def nonDriveComponents():
    
    def move_arm_to_target():
        while True:
                
            current_position = ladyRotation.position()
            error = 22 - current_position
            

            motor_power = ladyKP * error

            

            ladyBrown.spin(FORWARD, motor_power, PERCENT)

            if error < 2:
                ladyBrown.stop()
                return
        
    controller_1.buttonRight.pressed(move_arm_to_target)

    

    controller_1.buttonL2.pressed(activateMogo)
    controller_1.buttonL1.pressed(deactivateMogo)


def controllerRumble():
    while True:
        if brain.timer.time(SECONDS) == 10:
            controller_1.rumble(".....")
        if brain.timer.time(SECONDS) == 20:
            controller_1.rumble("....")
        if brain.timer.time(SECONDS) == 30:
            controller_1.rumble("...")
        if brain.timer.time(SECONDS) == 40:
            controller_1.rumble("..")
        if brain.timer.time(SECONDS) == 50:
            controller_1.rumble(".")
ladyOn = False
controller_1_up_down_buttons_control_motors_stopped = True

# define a task that will handle monitoring inputs from controller_1
def rc_auto_loop_function_controller_1():
    global controller_1_up_down_buttons_control_motors_stopped, remote_control_code_enabled
    # process the controller input every 20 milliseconds
    # update the motors based on the input values
    while True:
        if remote_control_code_enabled:
            # check the buttonUp/buttonDown status
            # to control motor_1
            if controller_1.buttonUp.pressing():
                ladyBrown.spin(FORWARD)
                controller_1_up_down_buttons_control_motors_stopped = False
            elif controller_1.buttonDown.pressing():
                ladyBrown.spin(REVERSE)
                controller_1_up_down_buttons_control_motors_stopped = False
            elif not controller_1_up_down_buttons_control_motors_stopped:
                ladyBrown.stop()
                # set the toggle so that we don't constantly tell the motor to stop when
                # the buttons are released
                controller_1_up_down_buttons_control_motors_stopped = True
        # wait before repeating the process
        wait(20, MSEC)

# define variable for remote controller enable/disable
remote_control_code_enabled = True
    

def intakeCode():
    while True:
        if controller_1.buttonR2.pressing():
            fullIntake.set_velocity(100,PERCENT)
            fullIntake.spin(FORWARD)
        elif controller_1.buttonR1.pressing():
            fullIntake.set_velocity(100,PERCENT)
            fullIntake.spin(REVERSE)
       
        else:
            fullIntake.stop()
           


def autonomous():
    controller_1.screen.print("I PRAY TO THE RNG GODS!")
    brain.screen.print("I PRAY TO THE RNG GODS!")
    fullIntake.set_velocity(100,PERCENT)
    ladyBrown.spin(FORWARD)
    wait(1.5,SECONDS)
    ladyBrown.stop()
    ladyBrown.spin(REVERSE)
    wait(1.5,SECONDS)
    ladyBrown.stop()
    bot.drive_for(REVERSE, 4,INCHES)
    bot.turn_for(RIGHT, 90,DEGREES)
    bot.drive_for(REVERSE, 7, INCHES)
    activateMogo()
    bot.turn_for(RIGHT, 80,DEGREES)
    fullIntake.spin(FORWARD)
    bot.drive_for(FORWARD, 8,INCHES)
    bot.turn_for(RIGHT, 93,DEGREES)
    bot.drive_for(FORWARD, 10.5,INCHES)
    bot.turn_for(LEFT, 90)
    bot.drive_for(FORWARD, 10)
    bot.turn_for(RIGHT, 5)
    bot.set_drive_velocity(60, PERCENT)
    bot.drive_for(REVERSE, 10)
    bot.turn_for(RIGHT,35)
    bot.drive_for(REVERSE, 12, INCHES)
    bot.turn_for(RIGHT, 34)
    bot.drive_for(FORWARD, 8)
    wait(1000,MSEC)
    bot.drive_for(REVERSE, 4)
    bot.turn_for(RIGHT, 60)
    bot.drive_for(FORWARD, 3)
    bot.drive_for(REVERSE, 3)
    bot.turn_for(RIGHT, 150)
    bot.drive_for(REVERSE, 10)
    deactivateMogo()
    bot.drive_for(FORWARD, 10)
    

    


    




def driver_control():
    
    driveThread = Thread(exponentialDrive)
    nonDriveComponentsThread = Thread(nonDriveComponents)
    rumbleThread = Thread(controllerRumble)
    rc_auto_loop_function_controller_1thread = Thread(rc_auto_loop_function_controller_1)
    intakeThread = Thread(intakeCode)



 

competition = Competition(driver_control, autonomous)
