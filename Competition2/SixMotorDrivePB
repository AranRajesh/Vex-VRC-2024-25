#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
leftsideFront = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)
leftsideMiddle = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)
leftsideBack = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)
leftside = MotorGroup(leftsideFront, leftsideMiddle, leftsideBack)
rightsideFront = Motor(Ports.PORT5, GearSetting.RATIO_18_1, True)
rightsideMiddle = Motor(Ports.PORT6, GearSetting.RATIO_18_1, True)
rightsideBack = Motor(Ports.PORT7, GearSetting.RATIO_18_1, True)
rightside = MotorGroup(rightsideFront, rightsideMiddle, rightsideBack)


controller_1 = Controller(PRIMARY)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


# Make random actually random
def initializeRandomSeed():
    wait(100, MSEC)
    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()
    urandom.seed(int(random))
      
# Set random seed 
initializeRandomSeed()


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")


    # x₁ = Left Motor X = [Controller] [3] position + [Controller] [1] position
        # x₂ = Right Motor X = [Controller] [3] position - [Controller] [1] position
while True:   
    # Sets each motor's velocity to 0.0001x³ (shown as 0.0001 * x * x * x)
    leftsideFront.set_velocity((0.0001 * (((controller_1.axis1.position() + controller_1.axis3.position()) * (controller_1.axis1.position() + controller_1.axis3.position())) * (controller_1.axis1.position() + controller_1.axis3.position()))), PERCENT)
    leftsideMiddle.set_velocity((0.0001 * (((controller_1.axis1.position() + controller_1.axis3.position()) * (controller_1.axis1.position() + controller_1.axis3.position())) * (controller_1.axis1.position() + controller_1.axis3.position()))), PERCENT)
    leftsideBack.set_velocity((0.0001 * (((controller_1.axis1.position() + controller_1.axis3.position()) * (controller_1.axis1.position() + controller_1.axis3.position())) * (controller_1.axis1.position() + controller_1.axis3.position()))), PERCENT)
        
    rightsideFront.set_velocity((0.0001 * (((controller_1.axis1.position() - controller_1.axis3.position()) * (controller_1.axis1.position() - controller_1.axis3.position())) * (controller_1.axis1.position() - controller_1.axis3.position()))), PERCENT)
    rightsideMiddle.set_velocity((0.0001 * (((controller_1.axis1.position() - controller_1.axis3.position()) * (controller_1.axis1.position() - controller_1.axis3.position())) * (controller_1.axis1.position() - controller_1.axis3.position()))), PERCENT)
    rightsideBack.set_velocity((0.0001 * (((controller_1.axis1.position() - controller_1.axis3.position()) * (controller_1.axis1.position() - controller_1.axis3.position())) * (controller_1.axis1.position() - controller_1.axis3.position()))), PERCENT)
        
    # Spins motor according to the velocity set
    leftsideFront.spin(FORWARD)
    leftsideMiddle.spin(FORWARD)
    leftsideBack.spin(FORWARD)

    rightsideFront.spin(FORWARD)
    rightsideMiddle.spin(FORWARD)
    rightsideBack.spin(FORWARD)


    


    
